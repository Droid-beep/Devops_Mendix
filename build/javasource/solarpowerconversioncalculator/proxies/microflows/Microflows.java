// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package solarpowerconversioncalculator.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the SolarPowerConversionCalculator module
	public static solarpowerconversioncalculator.proxies.Dashboard calculationDashboard_CreateNew(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("SolarPowerConversionCalculator.CalculationDashboard_CreateNew").withParams(params).execute(context);
		return result == null ? null : solarpowerconversioncalculator.proxies.Dashboard.initialize(context, result);
	}
	public static solarpowerconversioncalculator.proxies.Element dS_SearchForChosen(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("SolarPowerConversionCalculator.DS_SearchForChosen").withParams(params).execute(context);
		return result == null ? null : solarpowerconversioncalculator.proxies.Element.initialize(context, result);
	}
	public static void electrode_CreateNew(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("SolarPowerConversionCalculator.Electrode_CreateNew").withParams(params).execute(context);
	}
	public static void electrodeAdd(IContext context, solarpowerconversioncalculator.proxies.Electrode _solarCell)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("SolarCell", _solarCell == null ? null : _solarCell.getMendixObject());
		Core.microflowCall("SolarPowerConversionCalculator.ElectrodeAdd").withParams(params).execute(context);
	}
	public static void element_Delete(IContext context, solarpowerconversioncalculator.proxies.Element _element)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Element", _element == null ? null : _element.getMendixObject());
		Core.microflowCall("SolarPowerConversionCalculator.Element_Delete").withParams(params).execute(context);
	}
	public static void laminator_CreateNew(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("SolarPowerConversionCalculator.Laminator_CreateNew").withParams(params).execute(context);
	}
	public static void laminatorAdd(IContext context, solarpowerconversioncalculator.proxies.Laminator _solarCell)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("SolarCell", _solarCell == null ? null : _solarCell.getMendixObject());
		Core.microflowCall("SolarPowerConversionCalculator.LaminatorAdd").withParams(params).execute(context);
	}
	public static void refresh(IContext context, solarpowerconversioncalculator.proxies.Dashboard _dashboard)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Dashboard", _dashboard == null ? null : _dashboard.getMendixObject());
		Core.microflowCall("SolarPowerConversionCalculator.Refresh").withParams(params).execute(context);
	}
	public static void resetAll(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("SolarPowerConversionCalculator.ResetAll").withParams(params).execute(context);
	}
	public static java.math.BigDecimal resultCalculation(IContext context, solarpowerconversioncalculator.proxies.Dashboard _dashboard)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Dashboard", _dashboard == null ? null : _dashboard.getMendixObject());
		return (java.math.BigDecimal) Core.microflowCall("SolarPowerConversionCalculator.ResultCalculation").withParams(params).execute(context);
	}
	public static void revmove(IContext context, solarpowerconversioncalculator.proxies.Element _solarCell)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("SolarCell", _solarCell == null ? null : _solarCell.getMendixObject());
		Core.microflowCall("SolarPowerConversionCalculator.Revmove").withParams(params).execute(context);
	}
	public static void solarCell_CreateNew(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("SolarPowerConversionCalculator.SolarCell_CreateNew").withParams(params).execute(context);
	}
	public static void solarCellAdd(IContext context, solarpowerconversioncalculator.proxies.SolarCell _solarCell)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("SolarCell", _solarCell == null ? null : _solarCell.getMendixObject());
		Core.microflowCall("SolarPowerConversionCalculator.SolarCellAdd").withParams(params).execute(context);
	}
	public static void stringer_CreateNew(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("SolarPowerConversionCalculator.Stringer_CreateNew").withParams(params).execute(context);
	}
	public static void stringerAdd(IContext context, solarpowerconversioncalculator.proxies.Stringer _solarCell)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("SolarCell", _solarCell == null ? null : _solarCell.getMendixObject());
		Core.microflowCall("SolarPowerConversionCalculator.StringerAdd").withParams(params).execute(context);
	}
}